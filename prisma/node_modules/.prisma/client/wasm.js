
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CamionScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  nom_client: 'nom_client',
  code: 'code',
  num_nif: 'num_nif',
  adresse: 'adresse',
  telephone: 'telephone',
  email: 'email',
  rccm: 'rccm',
  idNat: 'idNat',
  isFacturedForImport: 'isFacturedForImport',
  isFacturedForExport: 'isFacturedForExport',
  isFacturedForTva: 'isFacturedForTva',
  lastPrintedDeclation: 'lastPrintedDeclation',
  enabled: 'enabled'
};

exports.Prisma.DetailFactureScalarFieldEnum = {
  id: 'id',
  factureId: 'factureId',
  rubriqueFactureId: 'rubriqueFactureId',
  qte: 'qte',
  prix: 'prix'
};

exports.Prisma.FactureImportScalarFieldEnum = {
  id: 'id',
  dossier: 'dossier',
  dateFacture: 'dateFacture',
  journalTypeId: 'journalTypeId',
  manifeste: 'manifeste',
  t1: 't1',
  camionId: 'camionId',
  marchandiseId: 'marchandiseId',
  declarationId: 'declarationId',
  declarationDate: 'declarationDate',
  liquidationId: 'liquidationId',
  liquidationDate: 'liquidationDate',
  quittanceId: 'quittanceId',
  quittanceDate: 'quittanceDate',
  quittanceMontant: 'quittanceMontant',
  poids: 'poids',
  colis: 'colis',
  status: 'status',
  createdAt: 'createdAt',
  montant: 'montant',
  typeFact: 'typeFact',
  niveauSaisie: 'niveauSaisie',
  numeroFacture: 'numeroFacture'
};

exports.Prisma.JournalScalarFieldEnum = {
  id: 'id',
  journalTypeId: 'journalTypeId',
  numero: 'numero'
};

exports.Prisma.JournalTypeScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle',
  formatJournal: 'formatJournal',
  ClientId: 'ClientId',
  derniereImpression: 'derniereImpression',
  solde: 'solde'
};

exports.Prisma.MarchandiseScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle'
};

exports.Prisma.PaiementScalarFieldEnum = {
  id: 'id',
  datePaiement: 'datePaiement',
  motif: 'motif',
  montant: 'montant',
  idClient: 'idClient',
  archived: 'archived',
  createdAt: 'createdAt',
  status: 'status',
  numeroInvoice: 'numeroInvoice'
};

exports.Prisma.RubriqueFactureScalarFieldEnum = {
  id: 'id',
  produit: 'produit',
  libelle: 'libelle',
  identifiant: 'identifiant',
  compte: 'compte',
  compteAnalytique: 'compteAnalytique'
};

exports.Prisma.UtilisateurScalarFieldEnum = {
  id: 'id',
  name: 'name',
  login: 'login',
  role: 'role',
  password: 'password',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.STATUSFACTURE = exports.$Enums.STATUSFACTURE = {
  B: 'B',
  C: 'C'
};

exports.TYPEFACTURATION = exports.$Enums.TYPEFACTURATION = {
  G: 'G',
  C: 'C',
  E: 'E'
};

exports.NIVEAUSAISIE = exports.$Enums.NIVEAUSAISIE = {
  R: 'R',
  A: 'A',
  N: 'N'
};

exports.StatusRow = exports.$Enums.StatusRow = {
  A: 'A',
  B: 'B',
  D: 'D'
};

exports.Prisma.ModelName = {
  Camion: 'Camion',
  Client: 'Client',
  DetailFacture: 'DetailFacture',
  FactureImport: 'FactureImport',
  Journal: 'Journal',
  JournalType: 'JournalType',
  Marchandise: 'Marchandise',
  Paiement: 'Paiement',
  RubriqueFacture: 'RubriqueFacture',
  Utilisateur: 'Utilisateur'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
